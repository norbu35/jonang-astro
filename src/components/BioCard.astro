---
import type { Media } from "../../payload-types";

interface Props {
  img: Media | string;
  name: string;
  roles: {
    role?: string | null | undefined;
    id?: string | null | undefined;
  }[];
  bio: string;
  id: string;
}

const { img, name, roles, bio, id } = Astro.props;

let sizesObj;
let srcset;
let sizes;

if (typeof img !== "string") {
  sizesObj = img.sizes as {
    thumbnail?: { url: string; width: number };
    card?: { url: string; width: number };
    tablet?: { url: string; width: number };
  };

  const widths = Object.values(sizesObj)
    .map((size) => size?.width)
    .filter((width): width is number => width !== null && width !== undefined);

  srcset = Object.values(sizesObj)
    .map((size) => `${size?.url} ${size?.width}w`)
    .filter(Boolean)
    .join(", ");

  sizes = widths
    .map((width) => `(max-width: ${width}px) ${width}px`)
    .join(", ");
}
---

<bio-card
  data-id={id}
  class="mx-auto flex w-80 lg:w-[40rem] flex-col justify-center border-4 border-red bg-red-900 text-center pb-6"
>
  <div class="relative w-full">
    {
      sizesObj && typeof img !== "string" && (
        <img
          src={img.url!}
          srcset={srcset}
          sizes={sizes}
          alt={img.alt}
          class="w-full h-auto object-cover"
        />
      )
    }
    <div
      class="absolute bottom-0 left-0 w-full bg-gradient-to-t from-black/60 to-transparent p-6 text-white"
    >
      <div class="lg:hidden text-2xl font-extrabold text-white shadow-lg">
        {name}
      </div>
      <div
        class="lg:hidden flex flex-col items-center justify-center text-lg font-semibold mt-2 shadow-md"
      >
        {
          roles.map((el) => (
            <div class="bg-white/30 p-1 px-3 rounded-md z-10">{el.role}</div>
          ))
        }
      </div>
    </div>
    <div
      class="absolute bottom-0 left-0 w-full h-24 bg-gradient-to-t from-red-900 to-transparent"
    >
    </div>
  </div>
  <button
    id={`bioButton-${id}`}
    class="secondary-button lg:hidden text-white bg-yellow-600 px-4 py-2 rounded-md transition-all duration-300 hover:bg-yellow-500 focus:bg-yellow-700 focus:outline-none focus:ring focus:ring-yellow-300"
  >
    <span class="button-text">Show Bio</span>
  </button>
  <div>
    <div class="hidden lg:flex lg:visible flex-col gap-12 py-6">
      <div class="text-4xl font-extrabold">{name}</div>
      <div
        class="text-2xl text-red-950 bg-white/80 p-2 flex flex-col justify-center"
      >
        {roles.map((el) => <div class="">{el.role}</div>)}
      </div>
    </div>
    <div
      id={`bio-${id}`}
      set:html={bio}
      class="hidden lg:block transition-all duration-500 ease-in-out max-h-0 lg:max-h-full lg:h-full opacity-0 lg:opacity-100 text-justify px-4"
    />
  </div>
</bio-card>

<script>
  class BioCard extends HTMLElement {
    connectedCallback() {
      const bioElement: HTMLElement = document.querySelector(
        `#bio-${this.dataset.id}`,
      )!;
      const bioButton = document.querySelector(
        `#bioButton-${this.dataset.id}`,
      )!;
      const buttonText = bioButton.querySelector(".button-text")!;

      const toggleBio = () => {
        if (bioElement?.classList.contains("hidden")) {
          bioElement.classList.remove("hidden");
          bioElement.style.maxHeight = `${bioElement.scrollHeight}px`;
          setTimeout(() => {
            bioElement.style.opacity = "1";
            buttonText.innerHTML = "Hide Bio";
          }, 10);
        } else {
          bioElement.style.opacity = "0";
          setTimeout(() => {
            bioElement.style.maxHeight = "0";
            buttonText.innerHTML = "Show Bio";
            setTimeout(() => {
              bioElement.classList.add("hidden");
            }, 500);
          }, 500);
        }
      };

      const resetBioForLargeScreens = () => {
        if (window.innerWidth >= 1024) {
          bioElement.classList.remove("hidden");
          bioElement.style.opacity = "1";
          bioElement.style.maxHeight = "100%";
        } else {
          if (!bioElement.classList.contains("hidden")) {
            bioElement.classList.add("hidden");
            bioElement.style.maxHeight = "0";
            bioElement.style.opacity = "0";
          }
        }
      };

      bioButton?.addEventListener("click", toggleBio);
      bioElement?.addEventListener("click", () => {
        if (window.innerWidth < 1024) {
          bioElement.style.opacity = "0";
          setTimeout(() => {
            bioElement.style.maxHeight = "0";
            buttonText.innerHTML = "Show Bio";
            setTimeout(() => {
              bioElement.classList.add("hidden");
            }, 500);
          }, 500);
        }
      });

      window.addEventListener("resize", resetBioForLargeScreens);
    }
  }

  customElements.define("bio-card", BioCard);
</script>
